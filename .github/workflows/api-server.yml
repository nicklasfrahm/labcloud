name: api-server

on:
  push:
    branches:
      - '**'
    paths:
      - api-server/**
      - .github/workflows/api-server.yml
    tags:
      - v*
  pull_request:
    branches:
      - '**'
    paths:
      - api-server/**
      - .github/workflows/api-server.yml
  schedule:
    - cron:  '0 0 * * *'
  workflow_dispatch:

env:
  APP: api-server
  GHCR_CONTAINER_IMAGE: ghcr.io/${{ github.repository_owner }}/labcloud-api-server
  DHCR_CONTAINER_IMAGE: registry.hub.docker.com/${{ github.repository_owner }}/labcloud-api-server
  GCP_CONTAINER_IMAGE: gcr.io/${{ secrets.GCP_PROJECT_ID }}/labcloud-api-server
  GCP_CLOUD_RUN_SERVICE: production-api-server
  GCP_REGION: us-west1
  PLATFORMS: linux/amd64,linux/arm64

defaults:
  run:
    working-directory: api-server

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Configure MongoDB
        uses: supercharge/mongodb-github-action@1.3.0
        with:
          mongodb-version: '4.4'

      - name: Configure Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          # Upgrade pip.
          python -m pip install --upgrade pip

          # Install dependencies.
          pip install -r requirements.txt

      - name: Lint source files
        run: black .

      - name: Run tests
        run: pytest

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Generate container meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: |
            ${{ env.GHCR_CONTAINER_IMAGE }}
            ${{ env.DHCR_CONTAINER_IMAGE }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to GitHub container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Log in to Docker Hub container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: registry.hub.docker.com
          username: ${{ github.repository_owner }}
          password: ${{ secrets.DHCR_PAT }}

      - name: Build and push container image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./${{ env.APP }}
          file: ./${{ env.APP }}/Dockerfile
          cache-from: type=registry,ref=${{ env.GHCR_CONTAINER_IMAGE }}:main
          cache-to: type=inline
          platforms: ${{ env.PLATFORMS }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

  deploy:
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    environment:
      name: production-api-server
      url: https://api.labcloud.intric.dk
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Generate container meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: |
            ${{ env.GCP_CONTAINER_IMAGE }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v1

      - name: Setup GCP Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      - name: Build and push container image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./${{ env.APP }}
          file: ./${{ env.APP }}/Dockerfile
          cache-from: type=registry,ref=${{ env.GHCR_CONTAINER_IMAGE }}:main
          cache-to: type=inline
          platforms: ${{ env.PLATFORMS }}
          push: yes
          tags: ${{ env.GCP_CONTAINER_IMAGE }}:main
          labels: ${{ steps.docker_meta.outputs.labels }}

      - name: Deploy to GCP Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0.2.0
        with:
          service: ${{ env.GCP_CLOUD_RUN_SERVICE }}
          image: ${{ env.GCP_CONTAINER_IMAGE }}:main
          region: ${{ env.GCP_REGION }}
          credentials: ${{ secrets.GCP_SA_KEY }}

      - name: Show deployment URL
        run: echo ${{ steps.deploy.outputs.url }}
